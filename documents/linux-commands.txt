Set the PATH variable permanently:
https://www.tecmint.com/set-path-variable-linux-permanently/



    Redirect stdout to one file and stderr to another file: command > out 2>error.
    Redirect stderr to stdout ( &1 ), and then redirect stdout to a file: command >out 2>&1.
    Redirect both to a file: command &> out.


Mounting and reading/writing to NTFS on CentOS:

https://wiki.centos.org/TipsAndTricks/NTFS


vim/vi text editor quick reference guide (also saved in github as VIM_Quick_Reference_Card.html): 
http://tnerual.eriogerg.free.fr/vimqrc.html
Good vim intro and basic commands (also saved in github as vim_intro_and_commands.pdf andpasted in email titled "vim/vi text editor quick reference guide"): 
https://www.keycdn.com/blog/vim-commands


Use rsync, instead of scp! Better for updating/regular backups. Some useful options:
  -a : archive mode, same as -rlptgoD
  -u : skip files that are newer on the receiver
  -v : verbose
  --ignore-existing : skip updating files that exist on receiver
rsync -au /src/dir/ host:/dest/dir/
rsync -a --ignore-existing /src/dir/ host:/dest/dir/


Using scp to copy files through intermediate server to local computer: 
scp -J brancour@inf2.pfc.forestry.ca  brancourt@borealcloud.nfis.org:file.txt  .
scp -J brancourt@borealremote.nfis.org brancourt@borealjump.nfis.org:file.txt .

An example given by Alex Chubaty on how to use rsync to copy files from borealcloud to local computer:
rsync -avzP -e 'ssh -A -J spades@borealremote.nfis.org,achubaty@borealjump.nfis.org' 10.20.0.213:/home/achubaty/myFiles /path/to/local/files/


To run a command as a background process, end with an &, but this will terminate if you exit from an ssh session in which you ran the command, so when you want the process to continue even after your ssh session ends, use the nohup (no hangups) command:

nohup command 2>&1 1> log.txt &

from: https://linuxize.com/post/how-to-use-linux-screen/
screen command  # To run a command in a new screen window
Crt-a d  # to detach from a screen session
screen -ls  # list all open screen sessions
screen resume  # to re-attach to the screen session
https://stackoverflow.com/questions/285015/how-to-prevent-a-background-process-from-being-stopped-after-closing-ssh-client
https://stackoverflow.com/questions/20766300/nohup-vs-screen-which-is-better-for-long-running-process
https://superuser.com/questions/454907/how-to-execute-a-command-in-screen-and-detach

Understanding the console output of the top command: 
https://www.howtogeek.com/668986/how-to-use-the-linux-top-command-and-understand-its-output/
https://www.howtogeek.com/194642/understanding-the-load-average-on-linux-and-other-unix-like-systems/

To split and rejoin a tar.gz archive into multiple parts:
tar cvzf foldername.tar.gz foldername
split -b 50M foldername.tar.gz foldername.tar.gz-
cat foldername.tar.gz-* > foldername.tar.gz

To zip a folder and all it's contents, applying compression:
zip -r output_file.zip file1 folder1

To unzip/extract a .gz gzip file, two options: 
gunzip filename.gz
zcat filename.gz > newFileName  # handy if gunzip gives you an "unexpected end of file", this will at least still output.
To gzip a file while keeping the original: 
gzip -c file > file.gz


To check/verify an md5 md5sum, from: https://www.geeksforgeeks.org/md5sum-linux-command/
md5sum -c file.md5 # checks the md5 sum of the file listed inside the .md5 file
md5sum -c --quiet file.md5 # only produces output if the check fails



Grep:

Use grep to select several types of lines based on how they begin: 
grep -E "^==.*|--.*|running.*|r1.*|Input.*" trim_master_log.txt > trim_master_log-highlights.txt 

Use grep on all lines of a file except the first line:
option1: cat R28-S91-M28K-Ben-filtered-map_js.txt | sed -n '1!p' | grep -c "expression"
option2: cat R28-S91-M28K-Ben-filtered-map_js.txt | awk '{if(NR>1)print}' | grep -c "expression"

Use grep to search for matches of an entire line: grep "^expression$" file
List line numbers of occurences: grep -n "expression" file
Count the number of occurences: grep -c "expression" file


Use grep to only print the segment of the matching lines that contains the matching string with padding of 0-20 characters on either side:
grep -oE ".{0,20}searchpattern.{0,20}"

An alternative way to truncate lines, piping it to cut to print only characters 10 to 90:
grep "searchpattern" | cut -c10-90

from: https://stackoverflow.com/questions/6958841/use-grep-to-report-back-only-line-numbers
Use grep to get only the line number(s) of the search pattern
grep -n "text to find" file.ext | cut -f1 -d:


Count how many unique lines there are in a file:

option1: sort -u R28-S91-M28K-Ben-filtered-map_js.txt | wc -l

option2: sort R28-S91-M28K-Ben-filtered-map_js.txt | uniq | wc -l


head -10 file  <-- print the first 10 lines of file

tail -10 file  <-- print the last 10 lines of file

tail -n +10 file  <- print file beginning 10 lines from the front

wc -l  <-- count the number of lines in a file

ls | wc -l  <-- count the number of files in a directory


# Find all files of *.txt in subfolders recursively, but only to a depth of the first level of subdirectories:
find . -mindepth 2 -maxdepth 2 -name *.txt -type f 
# Copy the results of the above search to a new folder:
cp `find . -mindepth 2 -maxdepth 2 -name *.txt -type f` newFolder
# Applying the above find command from within R: 
inFileList <- system2("find", args=c(".", paste0(" -mindepth 2 -maxdepth 2 -name *.txt -type f")), stdout=TRUE)
# Another way to execute a command on the files found, in this case the command is ls -lah: 
find . -mindepth 2 -maxdepth 2 -name *.txt -type f -execdir ls -lah '{}' \;

# concatenate all .txt files in current folder to master.txt:
cat `ls *.txt` >> master.txt

In bash, iterate through the lines in a file, see these: 
https://stackoverflow.com/questions/1521462/looping-through-the-content-of-a-file-in-bash
https://unix.stackexchange.com/questions/402750/modify-global-variable-in-while-loop
Simple version: 
  while read line; do
    echo "$line"
  done < file.txt
Better/safer version: 
  while IFS="" read -r line || [ -n "$line" ]
  do
    printf '%s\n' "$line"
  done < file.txt


Read a file from line number X to line number Y (there are other ways too):

awk 'NR >= X && NR <= Y' filename 
awk 'NR == X' filename 

To print out a range of lines from a file using sed:
sed -n 'startline,endline p; endline(+1?) q' in.txt > out.txt
  -n suppresses echoing the input as output
   p prints out the relevant lines
   q exit sed without processing rest of file


Passing bash variables into awk: 
https://stackoverflow.com/questions/19075671/how-do-i-use-shell-variables-in-an-awk-script

Addition/subtraction/arithmetic/math in a bash terminal: 
echo $((1 + 2))


du -sch * --exclude=pattern <-- calculate total size of everything (in current dir), and give a grand total, human readable, excluding any file names that contain the given pattern

df <-- displays the directory path, size and used/available of your various drives

df -h <-- human readable sizes


Commands to find out how much free memory/RAM there is:

free -g

vmstat -s


If having problems formatting a drive or usb, install gparted (sudo yum install gparted), and use it. To apply any pending operations in gparted, click the green check mark. See:

https://www.unixmen.com/how-to-format-usb-properly-in-linux/ 

How to format usb drive in the terminal:

https://www.unixmen.com/how-to-format-usb-drive-in-the-terminal/


To search for process id by command name:
ps -e | grep name
To kill all processes of a certain command:
pkill -9 name


Rename a common portion of all filenames in a directory:

rename ABC XYZ *.txt

or if you have a version of rename that takes perl regex:

rename 's/ABC/XYZ/' *.txt


To check whether a text file has Windows CRLF (carriage return, \n, newline) ending or Linux LF ending:
cat -A file.txt # Window CR will display as ^M
To convert Windows CRLF ending to Linux LF ending: 
sed -i -e 's/\r$//' file.txt


Using sed to replace parts of lines. Examples below.
command: 
  sed 's/original/new/' filename > out
  sed 's/original/new/g' filename > out # I think the /g means do it for all occurences, not just the first
  sed -i 's/original/new/g' filename  # the -i means edit the file in place
  sed -i 's/.*$/& hello/g' tmp.txt  # this adds the string " hello" to the end of each line (since in said you can't search for newline). See comment for s/regexp/replacement/ in the sed man page.
  sed -i 's/\(.*$\)/\1 hello/g' tmp.txt  # same as above but using the \( \) character group to specifiy a group to replace
  
From: https://linuxize.com/post/how-to-use-sed-to-find-and-replace-string-in-files/
-i: in-place editing (modifies the original file)
g - Global replacement flag. By default, sed reads the file line by line and changes only the first occurrence of the SEARCH_REGEX on a line. When the replacement flag is provided, all occurrences are replaced.

Using double quotes vs single quotes in bash to expand variables, etc:
from: https://askubuntu.com/questions/76808/how-do-i-use-variables-in-a-sed-command
The shell is responsible for expanding variables. When you use single quotes for strings, its contents will be treated literally. Use double quotes to make the shell expand variables while preserving whitespace.

Replace first occurrence of a comma within each line of a file with a dash:
(the -i stands for edit file in place)

sed -i 's/,/-/' filename


Replace all occurrences of a string within a file:

http://askubuntu.com/questions/20414/find-and-replace-text-within-a-file-using-commands

sed -i 's/original/new/g' filename


sed -i 's/\"X\/\"/\"X\/X\"/g' filename


sed -i 's/\"A\/\"/\"A\/A\"/g' filename

sed -i 's/\"C\/\"/\"C\/C\"/g' filename

sed -i 's/\"G\/\"/\"G\/G\"/g' filename

sed -i 's/\"T\/\"/\"T\/T\"/g' filename


Replace the first part of each line in a file:

sed 's/^[^ ]* /_/' filename > outfile # replaces all characters before the first space that aren't space on each line with _
sed 's/^[^\t]*/_/' filename > outfile # replaces all characters before the first tab that aren't tab on each line with _
sed 's/^[^\t]*\t//' filename > outfile # replaces all characters before the first tab as well as the first tab on each line with nothing
sed 's/\(>[^ ]*\) .*/\1/' test.fasta > outfile # capture the portion contained in ( ), which is a string beginning with > and followed by any non-space character, and then replace it and everything following it with simply the captured portion referred to by \1 backreference.
sed 's/\(>[^\t]*\)\t.*/\1/' test.fasta > outfile # same as above but with tab (and sometimes space???) instead of space


grep ">" reads-Sar.fasta | sed 's/\(>[^ ]*\) .*/\1/' | sed 's/>//' > seqIds-Sar.txt # using above, print out a list of seq Ids from a fasta file, one per line, with the starting ">" still there. The second sed command replaces all ">" with empty string.
grep ">" reads-Sar.fasta | sed 's/>\([^ ]*\) .*/\1/' > seqIds-Sar3.txt # does the same as above, but with just the one sed command, by moving the \( to exclude the initial ">" from the captured portion.

grep -oE "^>\S*" file.fasta | sed 's/>//g'  # A simpler way to do the above by using grep -oE. The grep -oE option only prints the segment of the matching lines that contains the matching string (\S matches any non-whitespace charcter). The sed command replaces all occurences of ">" with "".

# for the below, grep -m2 means just print the first two occurences:
grep -m 2 "^>" test3/wwp-n20.fasta | sed "s/>\([^ ]*\)/\1 \1/g"  # print out all header lines from a fasta file, with the sequence id duplicated, and without the initial ">"

grep -m 2 "^>" test3/wwp-n20.fasta | sed "s/>\([^ ]*\)\(_i[0-9]*\)/\1 \1\2/g"  # print out all header lines from a fasta file, with the sequence id duplicated, but the first duplication without the seqId portion (_i[0-9]*), leaving only the geneId and without the initial ">"

grep -m 2 "^>" test3/wwp-n20.fasta | sed "s/>\([^ ]*\)\(_i[0-9]*\) \(len=\)\([0-9]*\).*/\1 \1\2 \4/g"  # print out only all header lines from a fasta file, but only containing: geneId geneId+seqId lenVal



sed 's/\(.*\)\/\(.*\)\/\(.*\) \(.*\)/\3-\2-\1 \4 UTC/' old > new  # This formats a date line from 14/12/2017 22:51:09 to 2017-12-14 22:51:09 UTC


# bash script to do the above for each file in a folder:

path="/path/to/folder/"
for filename in $(ls $path)
do
    sed 's/^[^\t]*/_/' $path$filename > $path$filename"-edited.txt"
done



To format and mount a new disk drive to a folder on CentOS 7, from:
https://unix.stackexchange.com/questions/385769/mount-an-entire-drive-to-a-subforlder-centos-7
First:
ls /dev
[It should be something like sdb]
[Create a new partition:]
sudo fdisk /dev/sdb
[follow the directions, select n to create a new partition, use the defaults to fill up the whole disk, then select w to save and exit]
[Format the new partition as xfs:]
sudo mkfs.xfs /dev/sdb1
[Then create a directory at root level to mount it to:]
sudo mkdir /work
sudo mount -t xfs /dev/sdb1 /work
[Then do chmod and chown as desired. These permissions will be saved on the drive itself so you only need to do it once.]
[To unmount:]
sudo umount /work

To create a symbolic link to a directory or file, from:
https://stackoverflow.com/questions/9587445/how-to-create-a-link-to-a-directory
Symbolic or soft link (files or directories, more flexible and self documenting)
#     Source                             Link
ln -s /home/jake/doc/test/2000/something /home/jake/xxx
Hard link (files only, less flexible and not self documenting)
#   Source                             Link
ln /home/jake/doc/test/2000/something /home/jake/xxx

Safest way to remove a symbolic link symlink, from: 
https://linuxize.com/post/how-to-remove-symbolic-links-in-linux/
unlink xxx


Very handy guides to disk drive management in CentOS (6).

Adding a separate mountable (and automountable) disk drive:

http://www.techotopia.com/index.php/Adding_a_New_Disk_Drive_to_a_CentOS_System

Adding a drive/managing your Volume Group/Logical Volume(s) and Logical Volume Management (LVM) in CentOS. Very cool.

http://www.techotopia.com/index.php/Adding_a_New_Disk_to_a_CentOS_Volume_Group_and_Logical_Volume

Some useful info commands (see further down for some usage): mount, vgdisplay (volume group(s)), lvdisplay (logical volumes), pvdisplay -m (physical volumes), ls /dev/sd*, cat /proc/partitions

Some useful create commands:

(I first created an xfs partition on the new drive using gparted. could also use fdisk)

sudo pvcreate /dev/sdb1 # for example

sudo vgextend centos /dev/sdb1 # add it to the volume group

sudo lvextend -l+953861 /dev/centos/home # add 953861 logical extents to the home logical volume. alternatively:

sudo lvextend -L+3.6T /dev/centos/home # 3.6 Terrabytes to the home logical volume

# last step, revise the filesystem to use the new space (for centos 7 had to use xfs_growfs rather than resize2fs:

sudo xfs_growfs /dev/centos/home

# confirm:

df -h

The most popular answer in this thread has a good summary of what this guy did for the whole process:

https://stackoverflow.com/questions/26305376/resize2fs-bad-magic-number-in-super-block-while-trying-to-open


Some useful commands for finding out how partitions, logical volumes, logical volume management (lvm) are being used:
ls /dev/sd*  # list all physical SCSI (SATA...) storage devices, mounted and unmounted
ls /dev/dm*  # list all device mapper devices (used by lvm)
ls -l /dev/mapper/  # show where the dm* devices map to.
cat /proc/partitions  # show all partitions (including sd* and dm*, and unmounted) and their sizes (see pvdisplay -m).
mount # show all mounted filesystems (not very human readable), also: less /proc/mounts, less /proc/self/mounts
df -aTh # show all mounted filesystems in a human readable format
sudo vgdisply   # I didn't know how to use the data this gave me
sudo lvdisplay  # give information about the logical volumes 
sudo pvdisplay -m  # give information about the (mounted?) physical volumes, including (-m) the mapping of physical extents to logical volumes and logical extents. I'm guessing if an sd* doesn't show up in this list then it isn't mounted.
sudo fdisk -l /dev/sdc2  # (or sfdisk) get info on unmounted partition, including filesystem.
parted /dev/sdX -l  # similar but better formatted output
sudo mount /dev/sdc2 /mnt/mountSdc2  # this was all i needed to do for the qnx4.x filesystem of /dev/sdc2 on Jun-Jun's Z800.
sudo mount /dev/sdd1 /mnt/usbMount/  # this is how i mounted Grace's external usb drive. When I did so I got this msg:
                                        # The disk contains an unclean file system (0, 0).
                                        # The file system wasn't safely closed on Windows. Fixing.


==============================
Automatic security updates in CentOS:
https://serversforhackers.com/video/automatic-security-updates-centos


sudo yum install name

yum search string

# yum search is not a reliable way to find the packages. Use yum provides instead and use a filename that you know should be in the package that you want to find - e.g yum provides '*/File/Glob.pm'

yum list available 'name*'
sudo yum install 'name*'

sudo yum list installed | grep string

repoquery --list name

locate name


-----
yum grouplist
yum grouplist hidden
yum grouplist hidden ids
yum groupinstall "Group Name"
yum groupremove "Group Name"
# if this doesn't work: yum groupinstall "Group Name"
yum groups mark install "Group Name"
yum groups mark convert "Group Name"
yum groupinstall "Group Name"
----------


cat /etc/redhat-release

sudo yum clean all

sudo yum update

sudo yum --security upgrade

sudo yum install yum-cron

sudo gedit /etc/yum/yum-cron.conf

      update_cmd = security
      apply_updates = yes

sudo systemctl status yum-cron
sudo systemctl enable yum-cron
# Or "restart" if already started
sudo systemctl start yum-cron


----------

cat /etc/redhat-release  - for CentOS version

----------

glibc /libc6 version:

https://ubuntuforums.org/showthread.php?t=1173797

yum list glibc


To update glibc and check that the fix is in place (from:

https://www.subhosting.net/kb/how-to-fix-glibc-vulnerability-cve-2015-7547-on-centos-linux/):

yum clean all
yum -y update glibc

Check changelog of newly installed glibc and make sure that fix for CVE-2015-7547 is listed there:
rpm -q --changelog glibc | grep CVE-2015-7547


========================

Patched Outputs:


[benrancourt@localhost Downloads]$ java -version
openjdk version "1.8.0_101"
OpenJDK Runtime Environment (build 1.8.0_101-b13)
OpenJDK 64-Bit Server VM (build 25.101-b13, mixed mode)
[benrancourt@localhost Downloads]$ openssl version
OpenSSL 1.0.1e-fips 11 Feb 2013
[benrancourt@localhost Downloads]$ rpm -q --changelog glibc | grep CVE-2015-7547
  CVE-2015-7547 fix (#1296030).
- Fix CVE-2015-7547: getaddrinfo() stack-based buffer overflow (#1296030).
[benrancourt@localhost Downloads]$

========================




