#!/bin/bash


####################################################
# brief overview of the VCF file format:
# http://www.htslib.org/doc/vcf.html
#
# The data lines of a VCF file are tab delimited as follows: 
# CHROM   POS   ID   REF   ALT   QUAL   FILTER   INFO   FORMAT  SAMPLE(can be more than one sample fields)
#
# The INFO field is further delimited by semicolons and contains key=value pairs.
# The FORMAT field is further delimited by colons and provides the keys for the data contained in the SAMPLE fields.
# The SAMPLE fields are further delimited by colons.
# 
# For my purposes, the VCF files generated by the SNPpipeline contain only one SAMPLE each.
# The FORMAT field contains these keys:
# GT:DP:DPR:RO:QR:AO:QA:GL
# The corresponding SAMPLE field will look something like this:
# 0/0:7:7,2:5:166:2:60:0,-1.91748,-0.269501
#
# I want to collect the following data from each line:
# CHROM,POS,REF,ALT,GT,DP,RO,AO
# The GT,DP,RO,AO values will be extracted from the SAMPLE field.
#
# Some info one these values:
#
# GT - genotypes
# "The GT in the FORMAT column tells us to expect genotypes in the following columns. ... The genotype is in the form 0|1, where 0 indicates the reference allele and 1 indicates the alternative allele, i.e it is heterozygous. The vertical pipe | indicates that the genotype is phased, and is used to indicate which chromosome the alleles are on. If this is a slash / rather than a vertical pipe, it means we donâ€™t know which chromosome they are on." https://www.ebi.ac.uk/training/online/courses/human-genetic-variation-introduction/variant-identification-and-analysis/understanding-vcf-format/
#
# from: https://samtools.github.io/hts-specs/VCFv4.3.pdf
# GT (String): Genotype, encoded as allele values separated by either of / or |. The allele values are 0 for the reference allele (what is in the REF field), 1 for the first allele listed in ALT, 2 for the second allele list in ALT and so on. For diploid calls examples could be 0/1, 1 | 0, or 1/2, etc.
# AD: Total read depth (forward and reverse) for each allele
# DP: Read depth
# GL: Genotype likelihoods
#
# From some ##INFO and ##FORMAT lines in my VCF files:
#
##INFO=<ID=DP,Number=1,Type=Integer,Description="Total read depth at the locus">
##INFO=<ID=DPB,Number=1,Type=Float,Description="Total read depth per bp at the locus; bases in reads overlapping / bases in haplotype">
##INFO=<ID=RO,Number=1,Type=Integer,Description="Reference allele observation count, with partial observations recorded fractionally">
##INFO=<ID=AO,Number=A,Type=Integer,Description="Alternate allele observations, with partial observations recorded fractionally">
##INFO=<ID=QR,Number=1,Type=Integer,Description="Reference allele quality sum in phred">
##INFO=<ID=QA,Number=A,Type=Integer,Description="Alternate allele quality sum in phred">
#
##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Read Depth">
##FORMAT=<ID=DPR,Number=A,Type=Integer,Description="Number of observation for each allele">
##FORMAT=<ID=RO,Number=1,Type=Integer,Description="Reference allele observation count">
##FORMAT=<ID=QR,Number=1,Type=Integer,Description="Sum of quality of the reference observations">
##FORMAT=<ID=AO,Number=A,Type=Integer,Description="Alternate allele observation count">
##FORMAT=<ID=QA,Number=A,Type=Integer,Description="Sum of quality of the alternate observations">
##FORMAT=<ID=GL,Number=G,Type=Float,Description="Genotype Likelihood, log10-scaled likelihoods of the data given the called genotype for each possible genotype generated from the reference and alternate alleles given the sample ploidy">



####################################################
# Pseudocode:
# for each vcf file:
#       remove all rows beginning with #
#       for each data line, extract in the following format:
#               "CHROM",POS,"REF","ALT","GT",DP,RO,AO


####################################################
# Execution:

# 1 == keep only the first listed ALT and AO value (if there are more than one), 0 == keep all listed ALT and AO values
keepOnlyFirstAltAndAO=1

# 1 == remove rows whose genotype contain an ALT which isn't the primary ALT, 0 == keep even those rows
removeRowsUsingNonPrimaryAlt=1

path="."
inputFileExtension="_cutoff"

echo "Running extract_from_vcf.sh."
echo "----------"
echo "Part 1: Extracting data from the VCF files."

if [ $keepOnlyFirstAltAndAO -gt 0 ]
then
  echo "You indicated you DO NOT want to keep any additional values after the first value in the ALT and AO fields, if there are extra values recorded." 
else
  echo "You indicated you DO want to keep all additional values after the first value in the ALT and AO fields, if there are extra values recorded." 
fi

for vcfName in $(ls $path | grep -E "$inputFileExtension\$")
do
  echo "Processing "$path/$vcfName
  
  # remove all lines beginning with #
  sed '/^#/d' $path/$vcfName > $path/$vcfName".tmp"

  # prepare the header line
  echo '"CHROM","POS","REF","ALT","GT","DP","RO","AO"' > $path/$vcfName".csv"

  # Below is the big sed command that extracts the data we want from each vcf data line: CHROM,POS,REF,ALT,GT,DP,RO,AO
  # It grabs the GT,DP,RO,AO values from the SAMPLE field of the data line.
  # The ALT and AO values usually only have one value but they can both sometimes have more than one value separated by commas, and we only want the first one, so I've parsed them as:
  #  \([ACTGactg]\+\)[ACTGactg,]*     and       \([0-9]\+\)[,:].*
  # Below are ten example vcf data lines to sanity-check this command with.
  if [ $keepOnlyFirstAltAndAO -gt 0 ]
  then
    sed 's/\([^#\t]\+\)\t\([0-9]\+\)\t.\+\t\([ACTGactg]\+\)\t\([ACTGactg]\+\)[ACTGactg,]*\t.\+\t.\+\t.\+\tGT:DP:DPR:RO:QR:AO:QA:GL\t\([0-9][|/][0-9]\):\([0-9]\+\):[0123456789,]\+:\([0-9]\+\):[0-9]\+:\([0-9]\+\)[,:].*/"\1",\2,"\3","\4","\5",\6,\7,\8/' $path/$vcfName".tmp" >> $path/$vcfName".csv" 
  else
    # In this version2 of the sed command, I've parsed the ALT and AO values to keep all possible comma-separated values rather than discarding the values after the first comma: 
    sed 's/\([^#\t]\+\)\t\([0-9]\+\)\t.\+\t\([ACTGactg]\+\)\t\([ACTGactg,]\+\)\t.\+\t.\+\t.\+\tGT:DP:DPR:RO:QR:AO:QA:GL\t\([0-9][|/][0-9]\):\([0-9]\+\):[0123456789,]\+:\([0-9]\+\):[0-9]\+:\([0123456789,]\+\).*/"\1",\2,"\3","\4","\5",\6,\7,"\8"/' $path/$vcfName".tmp" >> $path/$vcfName".csv" 
  fi

  rm $path/$vcfName".tmp" 
  
  # assumes that if a line doesn't begin with " then it was not parsed properly
  numErrors=`grep -c -v -E '^"' $path/$vcfName".csv"`
  if [ $numErrors -gt 0 ]
  then
    echo "***** "$vcfName": "$numErrors" lines weren't parsed properly."
  fi

done

# grep -c -v -E '^"' t_cutoff.csv
# grep -c -E "^LP" t_cutoff.csv


# Twelve VCF data lines to test the above sed command on. Paste them into a file and remove the # comment markers:
#
#LP36_DN44_c0_g1_i10	692	.	C	A	5.89823	PASS	AB=0;ABP=0;AC=0;AF=0;AN=2;AO=2;CIGAR=1X;DP=5;DPB=5;DPRA=0;EPP=7.35324;EPPR=3.73412;GTI=0;LEN=1;MEANALT=1;MQM=1;MQMR=1;NS=1;NUMALT=1;ODDS=1.06086;PAIRED=1;PAIREDR=1;PAO=0;PQA=0;PQR=0;PRO=0;QA=64;QR=114;RO=3;RPL=1;RPP=3.0103;RPPR=9.52472;RPR=1;RUN=1;SAF=1;SAP=3.0103;SAR=1;SRF=2;SRP=3.73412;SRR=1;TYPE=snp	GT:DP:DPR:RO:QR:AO:QA:GL	0/0:5:5,2:3:114:2:64:0,-1.31538,-0.090182
#LP36_DN44_c0_g1_i10	1184	.	A	C	0	Qual	AB=0;ABP=0;AC=0;AF=0;AN=2;AO=728;CIGAR=1X;DP=3148;DPB=3148;DPRA=0;EPP=7.78277;EPPR=8.73793;GTI=0;LEN=1;MEANALT=3;MQM=1;MQMR=1;NS=1;NUMALT=1;ODDS=173.197;PAIRED=0.990385;PAIREDR=0.991136;PAO=0;PQA=0;PQR=0;PRO=0;QA=27317;QR=65609;RO=1805;RPL=347;RPP=6.45841;RPPR=67.2053;RPR=381;RUN=1;SAF=455;SAP=101.812;SAR=273;SRF=1128;SRP=247.708;SRR=677;TYPE=snp	GT:DP:DPR:RO:QR:AO:QA:GL	0/0:3148:3148,728:1805:65609:728:27317:0,-697.082,-96.7396
#LP36_DN44_c0_g1_i10	2274	.	T	G	3265.73	PASS	AB=0;ABP=0;AC=2;AF=1;AN=2;AO=4117;CIGAR=1X;DP=4122;DPB=4122;DPRA=0;EPP=83.6459;EPPR=0;GTI=0;LEN=1;MEANALT=2;MQM=1;MQMR=0;NS=1;NUMALT=1;ODDS=751.962;PAIRED=0.982512;PAIREDR=0;PAO=0;PQA=0;PQR=0;PRO=0;QA=152682;QR=0;RO=0;RPL=2074;RPP=3.51717;RPPR=0;RPR=2043;RUN=1;SAF=2433;SAP=298.905;SAR=1684;SRF=0;SRP=0;SRR=0;TYPE=snp	GT:DP:DPR:RO:QR:AO:QA:GL	1/1:4122:4122,4117:0:0:4117:152682:-370.161,-1239.34,0
#LP36_DN44_c0_g1_i10	3496	.	A	C,T	1.99134e-13	Qual	AB=0,0;ABP=0,0;AC=0,0;AF=0,0;AN=2;AO=554,785;CIGAR=1X,1X;DP=2591;DPB=2591;DPRA=0,0;EPP=75.5077,93.634;EPPR=151.938;GTI=0;LEN=1,1;MEANALT=3,3;MQM=1,1;MQMR=1;NS=1;NUMALT=2;ODDS=33.3149;PAIRED=1,0.997452;PAIREDR=0.997502;PAO=0,0;PQA=0,0;PQR=0;PRO=0;QA=20481,28599;QR=43764;RO=1201;RPL=299,447;RPP=10.5987,35.8756;RPPR=11.6184;RPR=255,338;RUN=1,1;SAF=372,468;SAP=144.509,66.0826;SAR=182,317;SRF=787;SRP=254.563;SRR=414;TYPE=snp,snp	GT:DP:DPR:RO:QR:AO:QA:GL	0/0:2591:2591,554,785:1201:43764:554,785:20481,28599:0,-478.473,-58.1842,-527.248,-390.666,-37.4211
#LP36_DN1007_c0_g1_i7	55	.	T	A	0.401461	Qual	AB=0;ABP=0;AC=2;AF=1;AN=2;AO=2;CIGAR=1X;DP=2;DPB=2;DPRA=0;EPP=3.0103;EPPR=0;GTI=0;LEN=1;MEANALT=1;MQM=1;MQMR=0;NS=1;NUMALT=1;ODDS=2.33525;PAIRED=1;PAIREDR=0;PAO=0;PQA=0;PQR=0;PRO=0;QA=73;QR=0;RO=0;RPL=0;RPP=7.35324;RPPR=0;RPR=2;RUN=1;SAF=1;SAP=3.0103;SAR=1;SRF=0;SRP=0;SRR=0;TYPE=snp	GT:DP:DPR:RO:QR:AO:QA:GL	1/1:2:2,2:0:0:2:73:-0.189936,-0.60206,0
#LP36_DN1007_c0_g1_i7	92	.	GGC	AGT	0.401461	Qual	AB=0;ABP=0;AC=2;AF=1;AN=2;AO=2;CIGAR=1X1M1X;DP=2;DPB=2;DPRA=0;EPP=7.35324;EPPR=0;GTI=0;LEN=3;MEANALT=1;MQM=1;MQMR=0;NS=1;NUMALT=1;ODDS=2.33525;PAIRED=1;PAIREDR=0;PAO=0;PQA=0;PQR=0;PRO=0;QA=73;QR=0;RO=0;RPL=1;RPP=3.0103;RPPR=0;RPR=1;RUN=1;SAF=1;SAP=3.0103;SAR=1;SRF=0;SRP=0;SRR=0;TYPE=complex	GT:DP:DPR:RO:QR:AO:QA:GL	1/1:2:2,2:0:0:2:73:-0.189936,-0.60206,0
#LP36_DN1007_c0_g1_i7	101	.	ATGACCGTAGT	GTGGCCGGAGC	0.401461	Qual	AB=0;ABP=0;AC=2;AF=1;AN=2;AO=2;CIGAR=1X2M1X3M1X2M1X;DP=2;DPB=2;DPRA=0;EPP=3.0103;EPPR=0;GTI=0;LEN=11;MEANALT=1;MQM=1;MQMR=0;NS=1;NUMALT=1;ODDS=2.33525;PAIRED=1;PAIREDR=0;PAO=0;PQA=0;PQR=0;PRO=0;QA=73;QR=0;RO=0;RPL=2;RPP=7.35324;RPPR=0;RPR=0;RUN=1;SAF=1;SAP=3.0103;SAR=1;SRF=0;SRP=0;SRR=0;TYPE=complex	GT:DP:DPR:RO:QR:AO:QA:GL	1/1:2:2,2:0:0:2:73:-0.189936,-0.60206,0
#LP36_DN1007_c0_g1_i7	374	.	TTAA	CCGG	8.25005e-06	Qual	AB=0;ABP=0;AC=2;AF=1;AN=2;AO=8;CIGAR=4X;DP=9;DPB=9;DPRA=0;EPP=20.3821;EPPR=5.18177;GTI=0;LEN=4;MEANALT=1;MQM=1;MQMR=1;NS=1;NUMALT=1;ODDS=13.1738;PAIRED=1;PAIREDR=0;PAO=0;PQA=0;PQR=0;PRO=0;QA=184;QR=37;RO=1;RPL=0;RPP=20.3821;RPPR=5.18177;RPR=8;RUN=1;SAF=8;SAP=20.3821;SAR=0;SRF=0;SRP=5.18177;SRR=1;TYPE=mnp	GT:DP:DPR:RO:QR:AO:QA:GL	1/1:9:9,8:1:37:8:184:-0.600303,-2.60929,0
#LP36_DN1007_c0_g1_i7	388	.	TACTA	CACTC	0	Qual	AB=0;ABP=0;AC=2;AF=1;AN=2;AO=721;CIGAR=1X3M1X;DP=725;DPB=725.8;DPRA=0;EPP=1534.09;EPPR=0;GTI=0;LEN=5;MEANALT=5;MQM=1;MQMR=0;NS=1;NUMALT=1;ODDS=1303.42;PAIRED=1;PAIREDR=0;PAO=1;PQA=37;PQR=0;PRO=0;QA=27711;QR=0;RO=0;RPL=0;RPP=1568.64;RPPR=0;RPR=721;RUN=1;SAF=717;SAP=1534.09;SAR=4;SRF=0;SRP=0;SRR=0;TYPE=complex	GT:DP:DPR:RO:QR:AO:QA:GL	1/1:725:725,721:0:0:721:27711:-64.9658,-217.344,0
#LP36_DN1007_c0_g1_i7	413	.	T	C	2.74836e-14	Qual	AB=0;ABP=0;AC=2;AF=1;AN=2;AO=1110;CIGAR=1X;DP=1117;DPB=1117;DPRA=0;EPP=1783.45;EPPR=10.7656;GTI=0;LEN=1;MEANALT=1;MQM=1;MQMR=1;NS=1;NUMALT=1;ODDS=1499.36;PAIRED=1;PAIREDR=0.857143;PAO=0;PQA=0;PQR=0;PRO=0;QA=41536;QR=208;RO=7;RPL=74;RPP=1813.44;RPPR=10.7656;RPR=1036;RUN=1;SAF=1106;SAP=2378.73;SAR=4;SRF=5;SRP=5.80219;SRR=2;TYPE=snp	GT:DP:DPR:RO:QR:AO:QA:GL	1/1:1117:1117,1110:7:208:1110:41536:-99.128,-335.617,0
#LP36_DN5567_c0_g1_i3	398	.	TATA	TTT,TTTT	2.3567e-12	Qual	AB=0,0;ABP=0,0;AC=0,2;AF=0,1;AN=2;AO=26,71;CIGAR=1M1D1M1X,1M1X1M1X;DP=102;DPB=97.5;DPRA=0,0;EPP=36.4176,132.228;EPPR=13.8677;GTI=0;LEN=2,4;MEANALT=2,2;MQM=1,1;MQMR=1;NS=1;NUMALT=2;ODDS=28.2531;PAIRED=1,1;PAIREDR=0.8;PAO=2.66667,2.66667;PQA=96,96;PQR=96;PRO=2.66667;QA=941,2600;QR=194;RO=5;RPL=3,3;RPP=36.4176,132.228;RPPR=3.44459;RPR=23,68;RUN=1,1;SAF=26,71;SAP=59.4686,157.185;SAR=0,0;SRF=2;SRP=3.44459;SRR=3;TYPE=complex,complex	GT:DP:DPR:RO:QR:AO:QA:GL	2/2:102:102,26,71:5:194:26,71:941,2600:-5.93818,-20.1801,-4.0734,-29.6531,-34.11,0
#LP36_DN5220_c0_g1_i2	1020	.	CACC	TACT,CACT	8301.86	PASS	AB=0.49934,0.324538;ABP=3.01603,408.405;AC=1,1;AF=0.5,0.5;AN=2;AO=757,492;CIGAR=1X2M1X,3M1X;DP=1516;DPB=1541;DPRA=0,0;EPP=164.132,92.0054;EPPR=3.54074;GTI=0;LEN=4,1;MEANALT=7,7;MQM=15.2417,14.7033;MQMR=13.3244;NS=1;NUMALT=2;ODDS=422.957;PAIRED=0.997358,0.995935;PAIREDR=0.992366;PAO=6,12;PQA=107,355;PQR=487;PRO=29;QA=26994,18268;QR=9334;RO=262;RPL=412,271;RPP=15.8871,14.0442;RPPR=3.14291;RPR=345,221;RUN=1,1;SAF=455,276;SAP=70.1596,18.8991;SAR=302,216;SRF=144;SRP=8.61303;SRR=118;TYPE=complex,snp	GT:DP:DPR:RO:QR:AO:QA:GL	1/2:1516:1516,757,492:262:9334:757,492:26994,18268:-886.628,-254.66,-215.661,-520.125,0,-567.864


echo " "
echo "----------"

if [ $removeRowsUsingNonPrimaryAlt -eq 0 ]
then
  echo "Part 2: Skipping part 2 because you indicated you didn't want to remove rows whose genotype contain a non-primary ALT."
else
  echo "Part 2: Removing rows whose genotype contain a non-primary ALT."

  for fileName in $(ls $path/ | grep ".csv\$")
  do
    echo "Processing "$fileName". Number of lines before removal: "`wc -l $path/$fileName`
    
    # Don't keep any rows that use a non-primary ALT in the genotype:  
    grep -v -E ',"[0-9]/[2-9]",|,"[2-9]/[0-9]",' $path/$fileName >>  $path/$fileName".new"

    rm $path/$fileName
    mv $path/$fileName".new" $path/$fileName

    echo "   ...number of lines after removal: "`wc -l $path/$fileName`
          
  done 

fi

echo " "
echo "============================================="
echo "Finished extract_from_vcf.sh"



